# Name the workflow
name: Requested tests

on:
  # Trigger the workflow manually
  workflow_dispatch:
    # Allow the user to enter custom parameters
    inputs:
      # Variable to specify if there is a custom build type
      is_build_type:
        description: "put that to true if you want to use the custom build type"
        required: true
        type: boolean
        default: false
      # Variable to specify the custom build type
      BUILD_TYPE:
        description: "The build type (Release, Debug, RelWithDebInfo, etc.)"
        required: false
        type: string
        default: ""
      # Variable to specify if there is a custom compiler to use instead of the default one
      use_custom_compiler:
        description: "put that on true if you want tu use a custom compiler (by default it's GNU 9.4.0)"
        required: true
        type: boolean
        default: false
      # Variable to specify the custom compiler for CC to use
      CC_COMPILER:
        description: "the CC compiler path (eg. /usr/bin/clang-12)"
        required: false
        type: string
        default: ""
      # Variable to specify the custom compiler for CXX to use
      CXX_COMPILER:
        description: "the CXX compiler path (eg. /usr/bin/clang++-12)"
        required: false
        type: string
        default: ""

# Define some environment variables for the workflow
env:
  # Customize the default CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  # Customize the default CC compiler here (GNU 9.4.0, clang 12, etc.)
  CC: gcc-12
  # Customize the default CXX compiler here (GNU 9.4.0, clang++ 12, etc.)
  CXX: g++-12

jobs:
  tests:
    runs-on: ubuntu-22.04 #self-hosted

    steps:
    - uses: actions/checkout@v3

    - name: Add clang-15 repos
      run: |
        echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-15 main" | sudo tee -a /etc/apt/sources.list
        echo "deb-src http://apt.llvm.org/jammy/ llvm-toolchain-jammy-15 main" | sudo tee -a /etc/apt/sources.list
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -

    # install dependencies if needed
    - name: install all if not self-hosted
      if: ${{ !contains(github.repository, 'self-hosted') }}
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-12 g++-12 clang-15 cmake pkg-config gtkmm-3.0 libcurl4-openssl-dev

    - name: Setup build type
      if: inputs.is_build_type
      env:
        BUILD_TYPE: ${{ inputs.BUILD_TYPE }}
      run: |
        echo "Setting build type to ${{ env.BUILD_TYPE }}\n"

    - name: Setup CC and CXX compiler
      if: inputs.use_custom_compiler
      env:
        CC: ${{ inputs.CC_COMPILER }}
        CXX: ${{ inputs.CXX_COMPILER }}
      run: |
        echo "Setting CC compiler type to ${{ env.CC }}\n"
        echo "Setting CXX compiler type to ${{ env.CXX }}\n"

    - name: Configure CMake
      run: |
        cmake -S ${{github.workspace}} -B ${{github.workspace}}/build-gcc -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -D GTEST=true
        cmake -S ${{github.workspace}} -B ${{github.workspace}}/build-clang -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -D GTEST=true

    - name: Build
      run: cmake --build ${{github.workspace}}/build-gcc --config ${{env.BUILD_TYPE}} -j2
      run: cmake --build ${{github.workspace}}/build-clang --config ${{env.BUILD_TYPE}} -j2

      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    - name: Test-gcc
      working-directory: ${{github.workspace}}/build-gcc
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Test-clang
      working-directory: ${{github.workspace}}/build-clang
      run: ctest -C ${{env.BUILD_TYPE}}
