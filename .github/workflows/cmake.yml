name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:
    inputs:
      is_build_type:
        description: "put that to true if you want to use the custom build type"
        required: true
        type: boolean
        default: false
      BUILD_TYPE:
        description: "The build type (Release, Debug, RelWithDebInfo, etc.)"
        required: false
        type: string
        default: ""


env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup build type
      if: inputs.is_build_type
      env:
        BUILD_TYPE: ${{ inputs.BUILD_TYPE }}
      run: |
        echo "Setting build type to ${{ env.BUILD_TYPE }}\n"

      - name: Setup env variable
        run: ls /usr/bin
        run: export CC=/usr/bin/clang-14
        run: export CXX=/usr/bin/clang++-14

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

