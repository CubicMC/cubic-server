# Name the workflow
name: Auto build

on:
  # Trigger the workflow on push on the master branch
  push:
    branches: [ "master" ]
  # Trigger the workflow on pull request events
  pull_request:
    branches: [ "*" ]

# Define some environment variables for the workflow
env:
  # Customize the default CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        include:
          - CCcompiler: "gcc-12"
            CXXcompiler: "g++-12"
          # - CCcompiler: "/usr/bin/clang-15"
          #   CXXcompiler: "/usr/bin/clang++-15"
    runs-on: ubuntu-22.04 #self-hosted
    env:
      CC: ${{ matrix.CCcompiler }}
      CXX: ${{ matrix.CXXcompiler }}

    steps:
    # Checkout the repository
    - uses: actions/checkout@v3

    # install dependencies if needed
    - name: install all if not self-hosted
      if: ${{ !contains(github.repository, 'self-hosted') }}
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-12 g++-12 cmake pkg-config gtkmm-3.0

    - name: Cache build
      uses: actions/cache@v3
      id: cache-build
      with:
        path: ${{github.workspace}}/build
        key: ${{ matrix.CXXcompiler }}-build
        restore-keys: ${{ matrix.CXXcompiler }}-build

    # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    - name: Configure CMake
      env:
        CACHE_HIT: ${{steps.cache-build.outputs.cache-hit}}
      run: |
        if [[ "$CACHE_HIT" == 'false' ]]; then
            cmake -S ${{github.workspace}} -B ${{github.workspace}}/build

      # Build the program with the given configuration
    - name: Build
      run: cmake --build ${{github.workspace}}/build -j2
