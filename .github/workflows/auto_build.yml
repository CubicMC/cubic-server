# Name the workflow
name: Auto build

on:
  # Trigger the workflow on push on the master branch
  push:
    branches: [ "master" ]
  # Trigger the workflow on pull request events
  pull_request:
    branches: [ "*" ]

# Define some environment variables for the workflow
env:
  # Customize the default CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  matrix:
    strategy:
      matrix:
        include:
          - CCcompiler: "/platform/bin/gcc"
            CXXcompiler: "/platform/bin/g++"
          - CCcompiler: "/platform/bin/clang"
            CXXcompiler: "/platform/bin/clang++"
    build:
      # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
      # You can convert this to a matrix build if you need cross-platform coverage.
      # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
      runs-on: self-hosted

      steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      - name: Setup compiler
        env:
          CC: ${{ matrix.CCcompiler }}
          CXX: ${{ matrix.CXXcompiler }}
        run: |
          echo "Setting CC to ${{ env.CC }}\n"
          echo "Setting CXX to ${{ env.CXX }}\n"

        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      - name: Configure CMake
        run: |
          cmake -S ${{github.workspace}} -B ${{github.workspace}}/build

        # Build the program with the given configuration
      - name: Build
        run: cmake --build ${{github.workspace}}/build -j8
