#ifndef CUBICSERVER_RECIPES_SMELTING_HPP
#define CUBICSERVER_RECIPES_SMELTING_HPP

#include "Recipes.hpp"

namespace Recipe {
class Smelting : public Recipe {
public:
    Smelting(const std::string &identifier, const nlohmann::json &recipe);
    ~Smelting() = default;

    void dump(void) const override;
    ItemId getIngredient(void) const noexcept
    {
        return _ingredient;
    };
    ItemId getResult(void) const noexcept
    {
        return _result;
    };
    uint64_t getCookingTime(void) const noexcept
    {
        return _cookingTime;
    };

    static std::shared_ptr<Recipe> create(const std::string &identifier, const nlohmann::json &recipe);

private:
    ItemId _ingredient;    // what to cook
    ItemId _result;        // what is obtained
    double _experience;    // experience generated by the smelting
    uint64_t _cookingTime; // time it takes to cook
};
}; // namespace Recipe

#endif // CUBICSERVER_RECIPES_SMELTING_HPP
